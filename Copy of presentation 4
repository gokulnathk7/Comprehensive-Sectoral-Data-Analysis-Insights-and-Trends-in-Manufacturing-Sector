{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMbcY1Yvu8lB2OS5UDVxhDA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"lGjjNoSI6G7y","executionInfo":{"status":"ok","timestamp":1726810347500,"user_tz":-330,"elapsed":14760,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"5186ed9c-d302-4cce-d113-9ef6418a351a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a6190954-3f59-46b8-9a5a-0bfe7e573454\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a6190954-3f59-46b8-9a5a-0bfe7e573454\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dataset_for_16-20.xlsx to dataset_for_16-20.xlsx\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","source":["\n","# Replace 'your_file.xlsx' with the actual file name\n","df = pd.read_excel('your_file.xlsx', engine='openpyxl')\n","\n","# Display the DataFrame\n","print(df)\n"],"metadata":{"id":"_GrWLvpa61qD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df=pd.read_excel('/content/dataset_for_16-20.xlsx')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"id":"7e9d3mjW7Qaa","executionInfo":{"status":"ok","timestamp":1726810532315,"user_tz":-330,"elapsed":995,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"847f7a88-5c31-435f-9395-4762f9f5dc3e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Machine  Running_Hours  Idle_Hours  Maintenance_Hours  Output_Units  \\\n","0  Machine_A            150          30                 10          1000   \n","1  Machine_B            160          20                 15          1100   \n","2  Machine_C            145          35                  5          1050   \n","\n","  Process_Step  Time_Taken_Minutes    Supplier  Lead_Time_Days  \\\n","0       Step_1                   5  Supplier_A              15   \n","1       Step_2                   7  Supplier_B              12   \n","2       Step_3                   3  Supplier_C              10   \n","\n","   Disruption_Risk_Percent  Inventory_Level    Employee  Hours_Worked  \\\n","0                        5              200  Employee_A           160   \n","1                        8              250  Employee_B           150   \n","2                        3              150  Employee_C           170   \n","\n","   Overtime_Hours  Hourly_Rate  Overtime_Rate    Workstation  Tasks_Assigned  \\\n","0              20           20             30  Workstation_1               3   \n","1              15           22             33  Workstation_2               2   \n","2              10           18             27  Workstation_3               4   \n","\n","   Total_Time_Taken_Minutes  \n","0                        10  \n","1                         8  \n","2                        12  "],"text/html":["\n","  <div id=\"df-35d1735e-d107-4bf0-8bdb-f2915fd12e93\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Machine</th>\n","      <th>Running_Hours</th>\n","      <th>Idle_Hours</th>\n","      <th>Maintenance_Hours</th>\n","      <th>Output_Units</th>\n","      <th>Process_Step</th>\n","      <th>Time_Taken_Minutes</th>\n","      <th>Supplier</th>\n","      <th>Lead_Time_Days</th>\n","      <th>Disruption_Risk_Percent</th>\n","      <th>Inventory_Level</th>\n","      <th>Employee</th>\n","      <th>Hours_Worked</th>\n","      <th>Overtime_Hours</th>\n","      <th>Hourly_Rate</th>\n","      <th>Overtime_Rate</th>\n","      <th>Workstation</th>\n","      <th>Tasks_Assigned</th>\n","      <th>Total_Time_Taken_Minutes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Machine_A</td>\n","      <td>150</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1000</td>\n","      <td>Step_1</td>\n","      <td>5</td>\n","      <td>Supplier_A</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>200</td>\n","      <td>Employee_A</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>30</td>\n","      <td>Workstation_1</td>\n","      <td>3</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Machine_B</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>15</td>\n","      <td>1100</td>\n","      <td>Step_2</td>\n","      <td>7</td>\n","      <td>Supplier_B</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>250</td>\n","      <td>Employee_B</td>\n","      <td>150</td>\n","      <td>15</td>\n","      <td>22</td>\n","      <td>33</td>\n","      <td>Workstation_2</td>\n","      <td>2</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Machine_C</td>\n","      <td>145</td>\n","      <td>35</td>\n","      <td>5</td>\n","      <td>1050</td>\n","      <td>Step_3</td>\n","      <td>3</td>\n","      <td>Supplier_C</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>150</td>\n","      <td>Employee_C</td>\n","      <td>170</td>\n","      <td>10</td>\n","      <td>18</td>\n","      <td>27</td>\n","      <td>Workstation_3</td>\n","      <td>4</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35d1735e-d107-4bf0-8bdb-f2915fd12e93')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35d1735e-d107-4bf0-8bdb-f2915fd12e93 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35d1735e-d107-4bf0-8bdb-f2915fd12e93');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ca7309b3-54a1-41e1-b767-08012a190ec5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca7309b3-54a1-41e1-b767-08012a190ec5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ca7309b3-54a1-41e1-b767-08012a190ec5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_84ef7b0e-cd61-48ea-aa38-4be4834623b7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_84ef7b0e-cd61-48ea-aa38-4be4834623b7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Machine\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Machine_A\",\n          \"Machine_B\",\n          \"Machine_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Running_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 145,\n        \"max\": 160,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          150,\n          160,\n          145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Idle_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 20,\n        \"max\": 35,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          30,\n          20,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maintenance_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10,\n          15,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Output_Units\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 1000,\n        \"max\": 1100,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1000,\n          1100,\n          1050\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Process_Step\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Step_1\",\n          \"Step_2\",\n          \"Step_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time_Taken_Minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5,\n          7,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Supplier\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Supplier_A\",\n          \"Supplier_B\",\n          \"Supplier_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lead_Time_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 10,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          15,\n          12,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disruption_Risk_Percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 8,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 150,\n        \"max\": 250,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          200,\n          250,\n          150\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Employee\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Employee_A\",\n          \"Employee_B\",\n          \"Employee_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours_Worked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 150,\n        \"max\": 170,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          160,\n          150,\n          170\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overtime_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 10,\n        \"max\": 20,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          20,\n          15,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hourly_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 18,\n        \"max\": 22,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          20,\n          22,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overtime_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 27,\n        \"max\": 33,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          30,\n          33,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Workstation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Workstation_1\",\n          \"Workstation_2\",\n          \"Workstation_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tasks_Assigned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Time_Taken_Minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 8,\n        \"max\": 12,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10,\n          8,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.head()\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":163},"id":"QgGoM4177aMP","executionInfo":{"status":"ok","timestamp":1726810615983,"user_tz":-330,"elapsed":620,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"0802c823-d908-4b28-9b43-873218700ef6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Machine  Running_Hours  Idle_Hours  Maintenance_Hours  Output_Units  \\\n","0  Machine_A            150          30                 10          1000   \n","1  Machine_B            160          20                 15          1100   \n","2  Machine_C            145          35                  5          1050   \n","\n","  Process_Step  Time_Taken_Minutes    Supplier  Lead_Time_Days  \\\n","0       Step_1                   5  Supplier_A              15   \n","1       Step_2                   7  Supplier_B              12   \n","2       Step_3                   3  Supplier_C              10   \n","\n","   Disruption_Risk_Percent  Inventory_Level    Employee  Hours_Worked  \\\n","0                        5              200  Employee_A           160   \n","1                        8              250  Employee_B           150   \n","2                        3              150  Employee_C           170   \n","\n","   Overtime_Hours  Hourly_Rate  Overtime_Rate    Workstation  Tasks_Assigned  \\\n","0              20           20             30  Workstation_1               3   \n","1              15           22             33  Workstation_2               2   \n","2              10           18             27  Workstation_3               4   \n","\n","   Total_Time_Taken_Minutes  \n","0                        10  \n","1                         8  \n","2                        12  "],"text/html":["\n","  <div id=\"df-1edfeed6-8c05-4f0b-b1b2-da1d83200e4a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Machine</th>\n","      <th>Running_Hours</th>\n","      <th>Idle_Hours</th>\n","      <th>Maintenance_Hours</th>\n","      <th>Output_Units</th>\n","      <th>Process_Step</th>\n","      <th>Time_Taken_Minutes</th>\n","      <th>Supplier</th>\n","      <th>Lead_Time_Days</th>\n","      <th>Disruption_Risk_Percent</th>\n","      <th>Inventory_Level</th>\n","      <th>Employee</th>\n","      <th>Hours_Worked</th>\n","      <th>Overtime_Hours</th>\n","      <th>Hourly_Rate</th>\n","      <th>Overtime_Rate</th>\n","      <th>Workstation</th>\n","      <th>Tasks_Assigned</th>\n","      <th>Total_Time_Taken_Minutes</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Machine_A</td>\n","      <td>150</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1000</td>\n","      <td>Step_1</td>\n","      <td>5</td>\n","      <td>Supplier_A</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>200</td>\n","      <td>Employee_A</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>30</td>\n","      <td>Workstation_1</td>\n","      <td>3</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Machine_B</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>15</td>\n","      <td>1100</td>\n","      <td>Step_2</td>\n","      <td>7</td>\n","      <td>Supplier_B</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>250</td>\n","      <td>Employee_B</td>\n","      <td>150</td>\n","      <td>15</td>\n","      <td>22</td>\n","      <td>33</td>\n","      <td>Workstation_2</td>\n","      <td>2</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Machine_C</td>\n","      <td>145</td>\n","      <td>35</td>\n","      <td>5</td>\n","      <td>1050</td>\n","      <td>Step_3</td>\n","      <td>3</td>\n","      <td>Supplier_C</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>150</td>\n","      <td>Employee_C</td>\n","      <td>170</td>\n","      <td>10</td>\n","      <td>18</td>\n","      <td>27</td>\n","      <td>Workstation_3</td>\n","      <td>4</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1edfeed6-8c05-4f0b-b1b2-da1d83200e4a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1edfeed6-8c05-4f0b-b1b2-da1d83200e4a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1edfeed6-8c05-4f0b-b1b2-da1d83200e4a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b51b08ae-318d-4e9e-9749-1f36ca104164\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b51b08ae-318d-4e9e-9749-1f36ca104164')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b51b08ae-318d-4e9e-9749-1f36ca104164 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_51c6e34f-e5cd-4cbc-ab1a-74e216dc24d7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_51c6e34f-e5cd-4cbc-ab1a-74e216dc24d7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Machine\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Machine_A\",\n          \"Machine_B\",\n          \"Machine_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Running_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 145,\n        \"max\": 160,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          150,\n          160,\n          145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Idle_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 20,\n        \"max\": 35,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          30,\n          20,\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maintenance_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10,\n          15,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Output_Units\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 1000,\n        \"max\": 1100,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1000,\n          1100,\n          1050\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Process_Step\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Step_1\",\n          \"Step_2\",\n          \"Step_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time_Taken_Minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 7,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5,\n          7,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Supplier\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Supplier_A\",\n          \"Supplier_B\",\n          \"Supplier_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lead_Time_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 10,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          15,\n          12,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Disruption_Risk_Percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 3,\n        \"max\": 8,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          5,\n          8,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Inventory_Level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 150,\n        \"max\": 250,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          200,\n          250,\n          150\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Employee\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Employee_A\",\n          \"Employee_B\",\n          \"Employee_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours_Worked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 150,\n        \"max\": 170,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          160,\n          150,\n          170\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overtime_Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 10,\n        \"max\": 20,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          20,\n          15,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hourly_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 18,\n        \"max\": 22,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          20,\n          22,\n          18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Overtime_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 27,\n        \"max\": 33,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          30,\n          33,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Workstation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Workstation_1\",\n          \"Workstation_2\",\n          \"Workstation_3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tasks_Assigned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 4,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Time_Taken_Minutes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 8,\n        \"max\": 12,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          10,\n          8,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":680},"id":"znW9ZFIh7smi","executionInfo":{"status":"ok","timestamp":1726810654058,"user_tz":-330,"elapsed":692,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"de6a05a9-0e49-4096-9d63-71c7b71210d0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Machine                     0\n","Running_Hours               0\n","Idle_Hours                  0\n","Maintenance_Hours           0\n","Output_Units                0\n","Process_Step                0\n","Time_Taken_Minutes          0\n","Supplier                    0\n","Lead_Time_Days              0\n","Disruption_Risk_Percent     0\n","Inventory_Level             0\n","Employee                    0\n","Hours_Worked                0\n","Overtime_Hours              0\n","Hourly_Rate                 0\n","Overtime_Rate               0\n","Workstation                 0\n","Tasks_Assigned              0\n","Total_Time_Taken_Minutes    0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Machine</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Running_Hours</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Idle_Hours</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Maintenance_Hours</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Output_Units</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Process_Step</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Time_Taken_Minutes</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Supplier</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Lead_Time_Days</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Disruption_Risk_Percent</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Inventory_Level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Employee</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Hours_Worked</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Overtime_Hours</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Hourly_Rate</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Overtime_Rate</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Workstation</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Tasks_Assigned</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Total_Time_Taken_Minutes</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Calculate Overall Equipment Effectiveness (OEE)\n","df['Availability'] = df['Running_Hours'] / (df['Running_Hours'] + df['Idle_Hours'] + df['Maintenance_Hours'])\n","df['Performance'] = df['Output_Units'] / df['Running_Hours']\n","df['OEE'] = df['Availability'] * df['Performance']\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"id":"ZNk9Vhvs717D","executionInfo":{"status":"ok","timestamp":1726810756478,"user_tz":-330,"elapsed":500,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"7945de37-a029-476c-d4d1-c6f9bff0d8e3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Machine  Running_Hours  Idle_Hours  Maintenance_Hours  Output_Units  \\\n","0  Machine_A            150          30                 10          1000   \n","1  Machine_B            160          20                 15          1100   \n","2  Machine_C            145          35                  5          1050   \n","\n","  Process_Step  Time_Taken_Minutes    Supplier  Lead_Time_Days  \\\n","0       Step_1                   5  Supplier_A              15   \n","1       Step_2                   7  Supplier_B              12   \n","2       Step_3                   3  Supplier_C              10   \n","\n","   Disruption_Risk_Percent  ...  Hours_Worked Overtime_Hours  Hourly_Rate  \\\n","0                        5  ...           160             20           20   \n","1                        8  ...           150             15           22   \n","2                        3  ...           170             10           18   \n","\n","   Overtime_Rate    Workstation  Tasks_Assigned Total_Time_Taken_Minutes  \\\n","0             30  Workstation_1               3                       10   \n","1             33  Workstation_2               2                        8   \n","2             27  Workstation_3               4                       12   \n","\n","   Availability  Performance       OEE  \n","0      0.789474     6.666667  5.263158  \n","1      0.820513     6.875000  5.641026  \n","2      0.783784     7.241379  5.675676  \n","\n","[3 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-e0ac6720-1350-40c3-a2d3-8a3473c7c6fe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Machine</th>\n","      <th>Running_Hours</th>\n","      <th>Idle_Hours</th>\n","      <th>Maintenance_Hours</th>\n","      <th>Output_Units</th>\n","      <th>Process_Step</th>\n","      <th>Time_Taken_Minutes</th>\n","      <th>Supplier</th>\n","      <th>Lead_Time_Days</th>\n","      <th>Disruption_Risk_Percent</th>\n","      <th>...</th>\n","      <th>Hours_Worked</th>\n","      <th>Overtime_Hours</th>\n","      <th>Hourly_Rate</th>\n","      <th>Overtime_Rate</th>\n","      <th>Workstation</th>\n","      <th>Tasks_Assigned</th>\n","      <th>Total_Time_Taken_Minutes</th>\n","      <th>Availability</th>\n","      <th>Performance</th>\n","      <th>OEE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Machine_A</td>\n","      <td>150</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1000</td>\n","      <td>Step_1</td>\n","      <td>5</td>\n","      <td>Supplier_A</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>30</td>\n","      <td>Workstation_1</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>0.789474</td>\n","      <td>6.666667</td>\n","      <td>5.263158</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Machine_B</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>15</td>\n","      <td>1100</td>\n","      <td>Step_2</td>\n","      <td>7</td>\n","      <td>Supplier_B</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>...</td>\n","      <td>150</td>\n","      <td>15</td>\n","      <td>22</td>\n","      <td>33</td>\n","      <td>Workstation_2</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.820513</td>\n","      <td>6.875000</td>\n","      <td>5.641026</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Machine_C</td>\n","      <td>145</td>\n","      <td>35</td>\n","      <td>5</td>\n","      <td>1050</td>\n","      <td>Step_3</td>\n","      <td>3</td>\n","      <td>Supplier_C</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>...</td>\n","      <td>170</td>\n","      <td>10</td>\n","      <td>18</td>\n","      <td>27</td>\n","      <td>Workstation_3</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.783784</td>\n","      <td>7.241379</td>\n","      <td>5.675676</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0ac6720-1350-40c3-a2d3-8a3473c7c6fe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e0ac6720-1350-40c3-a2d3-8a3473c7c6fe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e0ac6720-1350-40c3-a2d3-8a3473c7c6fe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f2b35a92-a1ab-4939-bc77-15ce3ab16f84\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2b35a92-a1ab-4939-bc77-15ce3ab16f84')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f2b35a92-a1ab-4939-bc77-15ce3ab16f84 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a156699e-b472-46cf-972c-bf3406e43fd8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a156699e-b472-46cf-972c-bf3406e43fd8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 6))\n","plt.bar(df['Machine'], df['OEE'], color='skyblue')\n","plt.title('Overall Equipment Effectiveness (OEE) by Machine')\n","plt.xlabel('Machine')\n","plt.ylabel('OEE')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"OhpFkb9m8N7D","executionInfo":{"status":"ok","timestamp":1726810837097,"user_tz":-330,"elapsed":960,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"f34840ec-6df8-4f0e-fe42-bee38638b3e1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate total cycle time\n","total_cycle_time = df['Time_Taken_Minutes'].sum()\n","print('Total Cycle Time:','Time_Taken_Minutes')\n","print(total_cycle_time)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LACKFXkT8knQ","executionInfo":{"status":"ok","timestamp":1726811005499,"user_tz":-330,"elapsed":448,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"03df4dcb-422a-49df-db2d-e15bee4125fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total Cycle Time: Time_Taken_Minutes\n","15\n"]}]},{"cell_type":"code","source":["# Visualization of cycle time per step\n","plt.figure(figsize=(8, 5))\n","plt.bar(df['Process_Step'], df['Time_Taken_Minutes'], color='coral')\n","plt.title('Cycle Time by Process Step')\n","plt.xlabel('Process Step')\n","plt.ylabel('Time Taken (Minutes)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"shrdBAfi8rFJ","executionInfo":{"status":"ok","timestamp":1726811051834,"user_tz":-330,"elapsed":1048,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"08b25db3-7d67-424f-a212-855fd396d929"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate risk-adjusted lead time\n","df['Risk_Adjusted_Lead_Time'] = df['Lead_Time_Days'] * (1 + df['Disruption_Risk_Percent'] / 100)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"id":"yspSgp5d9ZBy","executionInfo":{"status":"ok","timestamp":1726811100030,"user_tz":-330,"elapsed":5,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"8da7cb71-a1a4-4eea-b03a-b78a6ed07a92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Machine  Running_Hours  Idle_Hours  Maintenance_Hours  Output_Units  \\\n","0  Machine_A            150          30                 10          1000   \n","1  Machine_B            160          20                 15          1100   \n","2  Machine_C            145          35                  5          1050   \n","\n","  Process_Step  Time_Taken_Minutes    Supplier  Lead_Time_Days  \\\n","0       Step_1                   5  Supplier_A              15   \n","1       Step_2                   7  Supplier_B              12   \n","2       Step_3                   3  Supplier_C              10   \n","\n","   Disruption_Risk_Percent  ...  Overtime_Hours Hourly_Rate  Overtime_Rate  \\\n","0                        5  ...              20          20             30   \n","1                        8  ...              15          22             33   \n","2                        3  ...              10          18             27   \n","\n","     Workstation  Tasks_Assigned  Total_Time_Taken_Minutes Availability  \\\n","0  Workstation_1               3                        10     0.789474   \n","1  Workstation_2               2                         8     0.820513   \n","2  Workstation_3               4                        12     0.783784   \n","\n","   Performance       OEE  Risk_Adjusted_Lead_Time  \n","0     6.666667  5.263158                    15.75  \n","1     6.875000  5.641026                    12.96  \n","2     7.241379  5.675676                    10.30  \n","\n","[3 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-425dc118-9a61-475a-a6ee-29c1cb8f42b2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Machine</th>\n","      <th>Running_Hours</th>\n","      <th>Idle_Hours</th>\n","      <th>Maintenance_Hours</th>\n","      <th>Output_Units</th>\n","      <th>Process_Step</th>\n","      <th>Time_Taken_Minutes</th>\n","      <th>Supplier</th>\n","      <th>Lead_Time_Days</th>\n","      <th>Disruption_Risk_Percent</th>\n","      <th>...</th>\n","      <th>Overtime_Hours</th>\n","      <th>Hourly_Rate</th>\n","      <th>Overtime_Rate</th>\n","      <th>Workstation</th>\n","      <th>Tasks_Assigned</th>\n","      <th>Total_Time_Taken_Minutes</th>\n","      <th>Availability</th>\n","      <th>Performance</th>\n","      <th>OEE</th>\n","      <th>Risk_Adjusted_Lead_Time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Machine_A</td>\n","      <td>150</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1000</td>\n","      <td>Step_1</td>\n","      <td>5</td>\n","      <td>Supplier_A</td>\n","      <td>15</td>\n","      <td>5</td>\n","      <td>...</td>\n","      <td>20</td>\n","      <td>20</td>\n","      <td>30</td>\n","      <td>Workstation_1</td>\n","      <td>3</td>\n","      <td>10</td>\n","      <td>0.789474</td>\n","      <td>6.666667</td>\n","      <td>5.263158</td>\n","      <td>15.75</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Machine_B</td>\n","      <td>160</td>\n","      <td>20</td>\n","      <td>15</td>\n","      <td>1100</td>\n","      <td>Step_2</td>\n","      <td>7</td>\n","      <td>Supplier_B</td>\n","      <td>12</td>\n","      <td>8</td>\n","      <td>...</td>\n","      <td>15</td>\n","      <td>22</td>\n","      <td>33</td>\n","      <td>Workstation_2</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0.820513</td>\n","      <td>6.875000</td>\n","      <td>5.641026</td>\n","      <td>12.96</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Machine_C</td>\n","      <td>145</td>\n","      <td>35</td>\n","      <td>5</td>\n","      <td>1050</td>\n","      <td>Step_3</td>\n","      <td>3</td>\n","      <td>Supplier_C</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>...</td>\n","      <td>10</td>\n","      <td>18</td>\n","      <td>27</td>\n","      <td>Workstation_3</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.783784</td>\n","      <td>7.241379</td>\n","      <td>5.675676</td>\n","      <td>10.30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-425dc118-9a61-475a-a6ee-29c1cb8f42b2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-425dc118-9a61-475a-a6ee-29c1cb8f42b2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-425dc118-9a61-475a-a6ee-29c1cb8f42b2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-48d1c36a-d08d-49e3-bcfe-d72f89cb4255\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48d1c36a-d08d-49e3-bcfe-d72f89cb4255')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-48d1c36a-d08d-49e3-bcfe-d72f89cb4255 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_629423b9-6f9a-4d5e-a91f-d044fb6dcdf6\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_629423b9-6f9a-4d5e-a91f-d044fb6dcdf6 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# Visualization\n","plt.figure(figsize=(10, 6))\n","plt.plot(df['Supplier'], df['Risk_Adjusted_Lead_Time'], color='lightgreen')\n","plt.title('Risk-Adjusted Lead Time by Supplier')\n","plt.xlabel('Supplier')\n","plt.ylabel('Risk-Adjusted Lead Time (Days)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"_8ABIRKL9ttU","executionInfo":{"status":"ok","timestamp":1726811614999,"user_tz":-330,"elapsed":773,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"fdc85db3-84ac-4af9-b9f5-ab2e3d5cfcdb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Calculate total labor cost\n","df['Regular_Cost'] = df['Hours_Worked'] * df['Hourly_Rate']\n","df['Overtime_Cost'] = df['Overtime_Hours'] * df['Overtime_Rate']\n","df['Total_Cost'] = df['Regular_Cost'] + df['Overtime_Cost']\n","\n","# Display total labor costs per employee\n","print(df[['Employee', 'Total_Cost']])\n","\n","# Calculate and display total labor costs for the company\n","total_cost = df['Total_Cost'].sum()\n","print(f'Total Labor Cost: ${total_cost}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ekUzGayZ_Z4F","executionInfo":{"status":"ok","timestamp":1726811751457,"user_tz":-330,"elapsed":1590,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"ab98a438-93fb-4621-e460-fafe925a6a67"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     Employee  Total_Cost\n","0  Employee_A        3800\n","1  Employee_B        3795\n","2  Employee_C        3330\n","Total Labor Cost: $10925\n"]}]},{"cell_type":"code","source":["# Calculate efficiency (based on ideal time of 10 minutes per workstation)\n","ideal_time = 10\n","df['Efficiency'] = df['Total_Time_Taken_Minutes'] / ideal_time\n","\n","# Visualization of production line balancing\n","plt.figure(figsize=(10, 6))\n","plt.bar(df['Workstation'], df['Efficiency'], color='dodgerblue')\n","plt.title('Production Line Efficiency by Workstation')\n","plt.xlabel('Workstation')\n","plt.ylabel('Efficiency (Ratio of Time Taken to Ideal Time)')\n","plt.show()\n","\n","print(df[['Workstation', 'Efficiency']])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"h6BFRpz3ADef","executionInfo":{"status":"ok","timestamp":1726811779955,"user_tz":-330,"elapsed":685,"user":{"displayName":"gokulnath Karuppanan","userId":"12194540051256106515"}},"outputId":"2d1e893e-62c6-46b9-b576-f82ccc5bb67e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["     Workstation  Efficiency\n","0  Workstation_1         1.0\n","1  Workstation_2         0.8\n","2  Workstation_3         1.2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"JLkIY0LyAKqb"},"execution_count":null,"outputs":[]}]}